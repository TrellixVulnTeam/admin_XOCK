{"ast":null,"code":"var _jsxFileName = \"/Users/juri/Documents/ex/cp-dev/src/components/molecules/layout/ListView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport axios from 'axios';\nimport useIntersectionObserver from '../../organisms/UseIntersectionObserver';\n/* fake */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst fakeFetch = (delay = 1000) => new Promise(res => setTimeout(res, delay));\n/* 리스트 아이템 */\n\n\nconst ListItem = ({\n  number\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"ListItem\",\n  children: /*#__PURE__*/_jsxDEV(\"span\", {\n    children: number\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 11,\n  columnNumber: 3\n}, this);\n\n_c = ListItem;\n\nfunction ListView() {\n  _s();\n\n  /* 아이템 개수와 현재 로딩 상태 */\n  const [state, setState] = useState({\n    itemCount: 0,\n    isLoading: false\n  });\n  /* fake 비동기 아이템 로드 */\n\n  const fetchItems = async () => {\n    setState(prev => ({ ...prev,\n      isLoading: true\n    }));\n    await fakeFetch();\n    setState(prev => ({\n      itemCount: prev.itemCount + 10,\n      isLoading: false\n    }));\n  };\n\n  const getData = () => {\n    let key = '80CFeBE4MD6JmhEfClBx7zqo1eGvwTl5EZgKyMQc';\n    axios.get(\"http://52.78.173.151/boards\", {\n      \"x-api-key\": key,\n      params: {\n        page: payload.params.page,\n        count: payload.params.pageCount\n      }\n    }).then(response => {\n      if (response) {\n        const {\n          result,\n          data\n        } = response.data;\n\n        if (result.code === 1) {\n          setIsLoading(true);\n          const paging = response.data.paging;\n          const newList = response.data.data; // setList(newList);\n          // if (list){\n          //   const updateList = list.concat(newList);\n          //   setList(updateList);\n          // } \n          // setPaging(paging)\n\n          setIsLoading(false);\n        }\n      }\n    }).catch(err => alert(\"글을 가져오는데 실패 했습니다.\"));\n  };\n  /* 초기 아이템 로딩 */\n\n\n  useEffect(() => {\n    fetchItems();\n  }, []);\n  /* 타겟 엘리먼트 */\n\n  const target = useRef(null);\n  /* 인터섹션 callback */\n\n  const onIntersect = async ([entry], observer) => {\n    if (entry.isIntersecting) {\n      observer.unobserve(entry.target);\n      await fetchItems();\n      observer.observe(entry.target);\n    }\n  };\n  /* 옵저버 등록 */\n\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(onIntersect, {\n      threshold: 0.5\n    });\n    observer.observe(target.current);\n    return () => observer.disconnect();\n  }, []);\n  const {\n    itemCount,\n    isLoading\n  } = state;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [[...Array(itemCount)].map((_, i) => {\n      return /*#__PURE__*/_jsxDEV(ListItem, {\n        number: i\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 16\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: target,\n      className: \"Loading\",\n      children: isLoading && \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ListView, \"Lo4stcdE/nhmdrF0bi3G4sFjcOQ=\");\n\n_c2 = ListView;\nexport default ListView;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ListItem\");\n$RefreshReg$(_c2, \"ListView\");","map":{"version":3,"sources":["/Users/juri/Documents/ex/cp-dev/src/components/molecules/layout/ListView.js"],"names":["React","useState","useEffect","useCallback","useRef","axios","useIntersectionObserver","fakeFetch","delay","Promise","res","setTimeout","ListItem","number","ListView","state","setState","itemCount","isLoading","fetchItems","prev","getData","key","get","params","page","payload","count","pageCount","then","response","result","data","code","setIsLoading","paging","newList","catch","err","alert","target","onIntersect","entry","observer","isIntersecting","unobserve","observe","IntersectionObserver","threshold","current","disconnect","Array","map","_","i"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useCallback, useRef} from 'react'\nimport axios from 'axios'\nimport useIntersectionObserver from '../../organisms/UseIntersectionObserver';\n\n\n  \n/* fake */\nconst fakeFetch = (delay = 1000) => new Promise(res => setTimeout(res, delay));\n/* 리스트 아이템 */\nconst ListItem = ({ number }) => (\n  <div className=\"ListItem\">\n    <span>{number}</span>\n  </div>\n);\n\nfunction ListView() {\n  /* 아이템 개수와 현재 로딩 상태 */\n  const [state, setState] = useState({ itemCount: 0, isLoading: false });\n  /* fake 비동기 아이템 로드 */\n  const fetchItems = async () => {\n    setState(prev => ({ ...prev, isLoading: true }));\n    await fakeFetch();\n    setState(prev => ({\n      itemCount: prev.itemCount + 10,\n      isLoading: false\n    }));\n  };\n\n\n\n\n\n  const getData = () => {\n    let key = '80CFeBE4MD6JmhEfClBx7zqo1eGvwTl5EZgKyMQc'\n    axios.get(\"http://52.78.173.151/boards\", {\n      \"x-api-key\": key,\n      params:{\n        page: payload.params.page,\n        count: payload.params.pageCount\n      }\n      })\n      .then( response => {\n       if(response){\n         const { result, data } = response.data\n         if(result.code === 1){\n            setIsLoading(true)\n            const paging = response.data.paging;\n            const newList = response.data.data;\n            // setList(newList);\n            // if (list){\n            //   const updateList = list.concat(newList);\n            //   setList(updateList);\n            // } \n            // setPaging(paging)\n            setIsLoading(false)\n         }\n       }\n      })\n      .catch(err => alert(\"글을 가져오는데 실패 했습니다.\"))\n  }\n  /* 초기 아이템 로딩 */\n  useEffect(() => {\n    fetchItems();\n  }, []);\n\t/* 타겟 엘리먼트 */\n  const target = useRef(null);\n\t/* 인터섹션 callback */\n  const onIntersect = async ([entry], observer) => {\n    if (entry.isIntersecting) {\n      observer.unobserve(entry.target);\n      await fetchItems();\n      observer.observe(entry.target);\n    }\n  };\n  /* 옵저버 등록 */\n  useEffect(() => {\n    const observer = new IntersectionObserver(onIntersect, { threshold: 0.5 });\n    observer.observe(target.current);\n    return () => observer.disconnect();\n  }, []);\n  const { itemCount, isLoading } = state;\n  return (\n    <div>\n      {[...Array(itemCount)].map((_, i) => {\n        return <ListItem key={i} number={i} />;\n      })}\n      <div ref={target} className=\"Loading\">\n        {isLoading && \"Loading...\"}\n      </div>\n    </div>\n  );\n}\n\nexport default ListView;\n\n\n"]},"metadata":{},"sourceType":"module"}