{"ast":null,"code":"var _jsxFileName = \"/Users/juri/Documents/ex/cp-dev/src/components/molecules/layout/ListView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport axios from 'axios';\nimport useIntersectionObserver from '../../organisms/UseIntersectionObserver';\n/* fake */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst fakeFetch = (delay = 1000) => new Promise(res => setTimeout(res, delay));\n/* 리스트 아이템 */\n\n\nconst ListItem = ({\n  number\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"ListItem\",\n  children: /*#__PURE__*/_jsxDEV(\"span\", {\n    children: number\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 11,\n  columnNumber: 3\n}, this);\n\n_c = ListItem;\n\nfunction ListView() {\n  _s();\n\n  /* 아이템 개수와 현재 로딩 상태 */\n  const [state, setState] = useState({\n    itemCount: 0,\n    isLoading: false\n  });\n  const [paging, setPaging] = useState({});\n  const [list, setList] = useState([]);\n  const [payload, setPayload] = useState({\n    params: {\n      page: 1,\n      pageCount: 20,\n      totalCount: 0\n    }\n  });\n  /* fake 비동기 아이템 로드 */\n\n  const fetchItems = async () => {\n    setState(prev => ({ ...prev,\n      isLoading: true\n    }));\n    await fakeFetch();\n    setState(prev => ({\n      itemCount: prev.itemCount + 10,\n      isLoading: false\n    }));\n  };\n\n  const getData = () => {\n    let key = '80CFeBE4MD6JmhEfClBx7zqo1eGvwTl5EZgKyMQc';\n    axios.get(\"http://52.78.173.151/boards\", {\n      \"x-api-key\": key,\n      params: {\n        page: payload.params.page,\n        count: payload.params.pageCount\n      }\n    }).then(response => {\n      if (response) {\n        const {\n          result,\n          data\n        } = response.data;\n\n        if (result.code === 1) {\n          // setIsLoading(true)\n          const paging = response.data.paging;\n          const newList = response.data.data;\n          setList(newList);\n          setPaging(paging); // if (list){\n          //   const updateList = list.concat(newList);\n          //   setList(updateList);\n          // } \n          // setPaging(paging)\n          // setIsLoading(false)\n        }\n      }\n    }).catch(err => alert(\"글을 가져오는데 실패 했습니다.\"));\n  };\n  /* 초기 아이템 로딩 */\n\n\n  useEffect(() => {\n    fetchItems();\n  }, []);\n  /* 타겟 엘리먼트 */\n\n  const target = useRef(null);\n  /* 인터섹션 callback */\n\n  const onIntersect = async ([entry], observer) => {\n    if (entry.isIntersecting) {\n      observer.unobserve(entry.target);\n      await fetchItems();\n      observer.observe(entry.target);\n    }\n  };\n  /* 옵저버 등록 */\n\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(onIntersect, {\n      threshold: 0.5\n    });\n    observer.observe(target.current);\n    return () => observer.disconnect();\n  }, []);\n  useEffect(() => {\n    getData();\n  }, [payload]);\n  useEffect(() => {\n    console.log('list # ', list);\n    console.log('paging # ', paging);\n    console.log('payload # ', payload);\n  }, [list, paging]);\n  const {\n    itemCount,\n    isLoading\n  } = state;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [[...Array(itemCount)].map((_, i) => {\n      return /*#__PURE__*/_jsxDEV(ListItem, {\n        number: i\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 16\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: target,\n      className: \"Loading\",\n      children: isLoading && \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ListView, \"0+2weTzL34XoJf1jFzNQdusrZvE=\");\n\n_c2 = ListView;\nexport default ListView;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ListItem\");\n$RefreshReg$(_c2, \"ListView\");","map":{"version":3,"sources":["/Users/juri/Documents/ex/cp-dev/src/components/molecules/layout/ListView.js"],"names":["React","useState","useEffect","useCallback","useRef","axios","useIntersectionObserver","fakeFetch","delay","Promise","res","setTimeout","ListItem","number","ListView","state","setState","itemCount","isLoading","paging","setPaging","list","setList","payload","setPayload","params","page","pageCount","totalCount","fetchItems","prev","getData","key","get","count","then","response","result","data","code","newList","catch","err","alert","target","onIntersect","entry","observer","isIntersecting","unobserve","observe","IntersectionObserver","threshold","current","disconnect","console","log","Array","map","_","i"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useCallback, useRef} from 'react'\nimport axios from 'axios'\nimport useIntersectionObserver from '../../organisms/UseIntersectionObserver';\n\n\n  \n/* fake */\nconst fakeFetch = (delay = 1000) => new Promise(res => setTimeout(res, delay));\n/* 리스트 아이템 */\nconst ListItem = ({ number }) => (\n  <div className=\"ListItem\">\n    <span>{number}</span>\n  </div>\n);\n\nfunction ListView() {\n  /* 아이템 개수와 현재 로딩 상태 */\n  const [state, setState] = useState({ itemCount: 0, isLoading: false });\n  const [paging, setPaging] = useState({})\n  const [list, setList] = useState([])\n  const [payload, setPayload] = useState({\n      params: {\n          page: 1,\n          pageCount: 20,\n          totalCount: 0\n      }\n  })\n  /* fake 비동기 아이템 로드 */\n  const fetchItems = async () => {\n    setState(prev => ({ ...prev, isLoading: true }));\n    await fakeFetch();\n    setState(prev => ({\n      itemCount: prev.itemCount + 10,\n      isLoading: false\n    }));\n  };\n\n\n\n\n\n  const getData = () => {\n    let key = '80CFeBE4MD6JmhEfClBx7zqo1eGvwTl5EZgKyMQc'\n    axios.get(\"http://52.78.173.151/boards\", {\n      \"x-api-key\": key,\n      params:{\n        page: payload.params.page,\n        count: payload.params.pageCount\n      }\n      })\n      .then( response => {\n       if(response){\n         const { result, data } = response.data\n         if(result.code === 1){\n            // setIsLoading(true)\n            const paging = response.data.paging;\n            const newList = response.data.data;\n            setList(newList);\n            setPaging(paging)\n            // if (list){\n            //   const updateList = list.concat(newList);\n            //   setList(updateList);\n            // } \n            // setPaging(paging)\n            // setIsLoading(false)\n         }\n       }\n      })\n      .catch(err => alert(\"글을 가져오는데 실패 했습니다.\"))\n  }\n  /* 초기 아이템 로딩 */\n  useEffect(() => {\n    fetchItems();\n  }, []);\n\t/* 타겟 엘리먼트 */\n  const target = useRef(null);\n\t/* 인터섹션 callback */\n  const onIntersect = async ([entry], observer) => {\n    if (entry.isIntersecting) {\n      observer.unobserve(entry.target);\n      await fetchItems();\n      observer.observe(entry.target);\n    }\n  };\n  /* 옵저버 등록 */\n  useEffect(() => {\n    const observer = new IntersectionObserver(onIntersect, { threshold: 0.5 });\n    observer.observe(target.current);\n    return () => observer.disconnect();\n  }, []);\n  \n  useEffect(() => {\n    getData();\n  },[payload])\n  useEffect(() =>{\n    console.log('list # ',list)\n    console.log('paging # ',paging)\n    console.log('payload # ',payload)\n  },[list, paging])\n  const { itemCount, isLoading } = state;\n  return (\n    <div>\n      {[...Array(itemCount)].map((_, i) => {\n        return <ListItem key={i} number={i} />;\n      })}\n      <div ref={target} className=\"Loading\">\n        {isLoading && \"Loading...\"}\n      </div>\n    </div>\n  );\n}\n\nexport default ListView;\n\n\n"]},"metadata":{},"sourceType":"module"}