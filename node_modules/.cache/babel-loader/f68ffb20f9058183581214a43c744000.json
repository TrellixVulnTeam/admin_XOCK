{"ast":null,"code":"var _jsxFileName = \"/Users/juri/Documents/cp-dev/src/components/molecules/layout/ListView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport useInfiniteScroll from 'react-infinite-scroll-hook';\nimport axios from 'axios';\nimport Card from './Card'; // import Infinite from './Infinite'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ListView({}) {\n  _s();\n\n  // instance variable\n  const currentPage = useRef(1);\n  const totalPage = useRef(0); // request state\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null); // contents list\n\n  const [images, setImages] = useState([]); // ref\n\n  const rootRef = useRef(null);\n  const targetRef = useRef(null);\n  const loadImage = useCallback(async ({\n    query,\n    page\n  }) => {\n    try {\n      setLoading(true);\n      const data = await UnsplashAPI.searchPhotos({\n        query,\n        page,\n        per_page: PER_PAGE\n      });\n      totalPage.current = data.total_pages;\n      return data;\n    } catch (e) {\n      setError(e);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const searchImage = useCallback(async query => {\n    if (!query) {\n      await loadRandomImage();\n      return;\n    }\n\n    currentQuery.current = query;\n    currentPage.current = 1;\n    const data = await loadImage({\n      query,\n      page: 1,\n      per_page: PER_PAGE\n    });\n    setImages(data.results);\n  }, [loadImage, loadRandomImage]);\n  const loadMoreImage = useCallback(async () => {\n    if (images.length > 0) {\n      currentPage.current++;\n      const data = await loadImage({\n        query: currentQuery.current,\n        page: currentPage.current\n      });\n      setImages([...images, ...data.results]);\n    }\n  }, [images, loadImage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: rootRef,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: targetRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this) //   <List ref={infiniteRef}>\n  //     {items.map((item) => (\n  //       <ListItem key={item.key}>{item.value}</ListItem>\n  //     ))}\n  //     {loading && <ListItem>Loading...</ListItem>}\n  //   </List>\n  ;\n} // const ListView= () => {\n//   const getData = (body) => {\n//     let key = '80CFeBE4MD6JmhEfClBx7zqo1eGvwTl5EZgKyMQc'\n//     axios.get(\"http://52.78.173.151/boards\", {\n//       \"x-api-key\": key,\n//       }, body)\n//       .then( res => {\n//         //  if(body.loadMore) setListInfo([...listInfo, ...res.data.listInfo]);\n//         //  else setListInfo(res.data.listInfo)\n//            })\n//       .catch(err => alert(\"글을 가져오는데 실패 했습니다.\"))\n//   }\n//   getData();\n//     return (\n//       <div>\n//         <h2>TITLE</h2>\n//         <Card></Card>\n//       </div>\n//     )\n// }\n\n\n_s(ListView, \"kQzxLfsjztNBrVm5fBKbzXMdC0I=\");\n\n_c = ListView;\nexport default ListView;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListView\");","map":{"version":3,"sources":["/Users/juri/Documents/cp-dev/src/components/molecules/layout/ListView.js"],"names":["React","useState","useEffect","useRef","useInfiniteScroll","axios","Card","ListView","currentPage","totalPage","loading","setLoading","error","setError","images","setImages","rootRef","targetRef","loadImage","useCallback","query","page","data","UnsplashAPI","searchPhotos","per_page","PER_PAGE","current","total_pages","e","searchImage","loadRandomImage","currentQuery","results","loadMoreImage","length"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\nimport useInfiniteScroll from 'react-infinite-scroll-hook';\nimport axios from 'axios'\nimport Card from './Card'\n// import Infinite from './Infinite'\n\nfunction ListView({}) {\n    // instance variable\n    const currentPage = useRef(1);\n    const totalPage = useRef(0);\n\n    // request state\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    // contents list\n    const [images, setImages] = useState([]);\n\n    // ref\n    const rootRef = useRef(null);\n    const targetRef = useRef(null);\n\n\n    const loadImage = useCallback(async ({ query, page }) => {\n        try {\n          setLoading(true);\n          const data = await UnsplashAPI.searchPhotos({ query, page, per_page: PER_PAGE});\n          totalPage.current = data.total_pages;\n          return data;\n        } catch(e) {\n          setError(e);\n        } finally {\n          setLoading(false);\n        }\n    }, []);\n    \n    const searchImage = useCallback(async (query) => {\n      if(!query) {\n        await loadRandomImage();\n        return;\n      }\n      currentQuery.current = query;\n      currentPage.current = 1;\n      const data = await loadImage({ query, page: 1, per_page: PER_PAGE });\n      setImages(data.results);\n    }, [loadImage, loadRandomImage]);\n    \n    const loadMoreImage = useCallback(async () => {\n      if(images.length > 0) {\n        currentPage.current++;\n        const data = await loadImage({\n          query: currentQuery.current,\n          page: currentPage.current\n        });\n        setImages([...images, ...data.results])\n      }\n    },[images, loadImage]);\n\n\n    return (\n        <div ref={rootRef}>\n            <div ref={targetRef} />\n        </div>\n    //   <List ref={infiniteRef}>\n    //     {items.map((item) => (\n    //       <ListItem key={item.key}>{item.value}</ListItem>\n    //     ))}\n    //     {loading && <ListItem>Loading...</ListItem>}\n    //   </List>\n    );\n  }\n\n\n\n// const ListView= () => {\n\n//   const getData = (body) => {\n//     let key = '80CFeBE4MD6JmhEfClBx7zqo1eGvwTl5EZgKyMQc'\n//     axios.get(\"http://52.78.173.151/boards\", {\n//       \"x-api-key\": key,\n//       }, body)\n//       .then( res => {\n//         //  if(body.loadMore) setListInfo([...listInfo, ...res.data.listInfo]);\n//         //  else setListInfo(res.data.listInfo)\n//            })\n//       .catch(err => alert(\"글을 가져오는데 실패 했습니다.\"))\n//   }\n\n//   getData();\n//     return (\n//       <div>\n//         <h2>TITLE</h2>\n//         <Card></Card>\n//       </div>\n//     )\n// }\n\nexport default ListView;"]},"metadata":{},"sourceType":"module"}