{"ast":null,"code":"var _jsxFileName = \"/Users/juri/Documents/cp-dev/src/components/molecules/layout/ListView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport axios from 'axios';\nimport useIntersectionObserver from '../../organisms/UseIntersectionObserver'; // export default ({ root, target, onIntersect, threshold = 1.0, rootMargin = \"0px\" }) => {\n//     useEffect(\n//       () => {\n//         if (!root) {\n//           return;\n//         }\n//         const observer = new IntersectionObserver(onIntersect, {\n//           root,\n//           rootMargin,\n//           threshold,\n//         });\n//         if (!target) {\n//           return;\n//         }\n//         observer.observe(target);\n//         return () => {\n//           observer.unobserve(target);\n//         };\n//       }, [target, root, rootMargin, onIntersect, threshold]\n//     );\n//   };\n// import Infinite from './Infinite'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ListView({}) {\n  _s();\n\n  // instance variable\n  const currentPage = useRef(1);\n  const totalPage = useRef(0); // request state\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null); // contents list\n\n  const [images, setImages] = useState([]); // ref\n\n  const rootRef = useRef(null);\n  const targetRef = useRef(null);\n  useEffect(() => {\n    searchImage();\n  }, []);\n\n  const loadRandomImage = () => {\n    let key = '80CFeBE4MD6JmhEfClBx7zqo1eGvwTl5EZgKyMQc';\n    axios.get(\"http://52.78.173.151/boards\", {\n      \"x-api-key\": key\n    }).then(response => {\n      const {\n        result,\n        data\n      } = response.data;\n\n      if (response) {\n        if (result.code === 1) {\n          const eventData = response.data.data;\n          const {\n            totalCount\n          } = response.data.paging;\n          setEventList(eventData || []);\n          setTotalEventListCount(totalCount);\n        }\n      } //  if(body.loadMore) setListInfo([...listInfo, ...res.data.listInfo]);\n      //  else setListInfo(res.data.listInfo)\n\n    }).catch(err => alert(\"글을 가져오는데 실패 했습니다.\"));\n  };\n\n  const loadImage = useCallback(async ({\n    query,\n    page\n  }) => {\n    let key = '80CFeBE4MD6JmhEfClBx7zqo1eGvwTl5EZgKyMQc';\n\n    try {\n      setLoading(true); //   const data = await UnsplashAPI()\n      //   UnsplashAPI.searchPhotos({ \n      //     //   query, page, \n      //     //   per_page: PER_PAGE\n      // });\n      // console.log('res',data)\n      //   totalPage.current = data.total_pages;\n      //   return data;\n    } catch (e) {\n      setError(e);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const searchImage = useCallback(async () => {\n    console.log('TEST');\n    await loadRandomImage();\n    currentPage.current = 1;\n    const data = await loadImage({\n      page: 1\n    });\n    console.log('data', data); //   setImages(data.data.result);\n  }, [loadImage, loadRandomImage]);\n  const loadMoreImage = useCallback(async () => {\n    if (images.length > 0) {\n      currentPage.current++;\n      const data = await loadImage({//   page: currentQuery.current,\n        //   page: currentPage.current\n      });\n      setImages([...images, ...data.results]);\n    }\n  }, [images, loadImage]);\n  useIntersectionObserver({\n    root: rootRef.current,\n    target: targetRef.current,\n    onIntersect: ([{\n      isIntersecting\n    }]) => {\n      if (isIntersecting && !loading && currentPage.current < totalPage.current) {\n        loadMoreImage();\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: rootRef,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: targetRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 9\n  }, this) //   <List ref={infiniteRef}>\n  //     {items.map((item) => (\n  //       <ListItem key={item.key}>{item.value}</ListItem>\n  //     ))}\n  //     {loading && <ListItem>Loading...</ListItem>}\n  //   </List>\n  ;\n} // const ListView= () => {\n//   const getData = (body) => {\n//     let key = '80CFeBE4MD6JmhEfClBx7zqo1eGvwTl5EZgKyMQc'\n//     axios.get(\"http://52.78.173.151/boards\", {\n//       \"x-api-key\": key,\n//       }, body)\n//       .then( res => {\n//         //  if(body.loadMore) setListInfo([...listInfo, ...res.data.listInfo]);\n//         //  else setListInfo(res.data.listInfo)\n//            })\n//       .catch(err => alert(\"글을 가져오는데 실패 했습니다.\"))\n//   }\n//   getData();\n//     return (\n//       <div>\n//         <h2>TITLE</h2>\n//         <Card></Card>\n//       </div>\n//     )\n// }\n\n\n_s(ListView, \"Jok6hMF2CNFmTG1aD4pCa1WKC40=\", false, function () {\n  return [useIntersectionObserver];\n});\n\n_c = ListView;\nexport default ListView;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListView\");","map":{"version":3,"sources":["/Users/juri/Documents/cp-dev/src/components/molecules/layout/ListView.js"],"names":["React","useState","useEffect","useCallback","useRef","axios","useIntersectionObserver","ListView","currentPage","totalPage","loading","setLoading","error","setError","images","setImages","rootRef","targetRef","searchImage","loadRandomImage","key","get","then","response","result","data","code","eventData","totalCount","paging","setEventList","setTotalEventListCount","catch","err","alert","loadImage","query","page","e","console","log","current","loadMoreImage","length","results","root","target","onIntersect","isIntersecting"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useCallback, useRef} from 'react'\nimport axios from 'axios'\nimport useIntersectionObserver from '../../organisms/UseIntersectionObserver'\n\n\n// export default ({ root, target, onIntersect, threshold = 1.0, rootMargin = \"0px\" }) => {\n//     useEffect(\n//       () => {\n  \n//         if (!root) {\n//           return;\n//         }\n  \n//         const observer = new IntersectionObserver(onIntersect, {\n//           root,\n//           rootMargin,\n//           threshold,\n//         });\n  \n//         if (!target) {\n//           return;\n//         }\n  \n//         observer.observe(target);\n  \n//         return () => {\n//           observer.unobserve(target);\n//         };\n//       }, [target, root, rootMargin, onIntersect, threshold]\n//     );\n//   };\n\n\n\n// import Infinite from './Infinite'\n\nfunction ListView({}) {\n    // instance variable\n    const currentPage = useRef(1);\n    const totalPage = useRef(0);\n\n    // request state\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    // contents list\n    const [images, setImages] = useState([]);\n\n    // ref\n    const rootRef = useRef(null);\n    const targetRef = useRef(null);\n\n    useEffect(() => {\n        searchImage()\n    },[])\n\n    const loadRandomImage = () => {\n        let key = '80CFeBE4MD6JmhEfClBx7zqo1eGvwTl5EZgKyMQc'\n        axios.get(\"http://52.78.173.151/boards\", {\n          \"x-api-key\": key,\n          })\n          .then(response => {\n                const { result, data } = response.data;\n                if(response){\n                    if(result.code === 1 ){\n                        const eventData = response.data.data;\n                        const { totalCount } = response.data.paging;\n\n                        setEventList(eventData || []);\n                        setTotalEventListCount(totalCount);\n                    }\n                }\n            //  if(body.loadMore) setListInfo([...listInfo, ...res.data.listInfo]);\n            //  else setListInfo(res.data.listInfo)\n               })\n          .catch(err => alert(\"글을 가져오는데 실패 했습니다.\"))\n    }\n\n    const loadImage = useCallback(async ({ query, page }) => {\n        let key = '80CFeBE4MD6JmhEfClBx7zqo1eGvwTl5EZgKyMQc'\n        try {\n          setLoading(true);\n        //   const data = await UnsplashAPI()\n          \n        //   UnsplashAPI.searchPhotos({ \n        //     //   query, page, \n        //     //   per_page: PER_PAGE\n        // });\n        // console.log('res',data)\n        //   totalPage.current = data.total_pages;\n        //   return data;\n        } catch(e) {\n          setError(e);\n        } finally {\n          setLoading(false);\n        }\n    }, []);\n    \n    const searchImage = useCallback(async () => {\n        console.log('TEST')\n        await loadRandomImage();\n        currentPage.current = 1;\n        const data = await loadImage({ page: 1  });\n        console.log('data',data)\n        //   setImages(data.data.result);\n    }, [loadImage, loadRandomImage]);\n    \n    const loadMoreImage = useCallback(async () => {\n      if(images.length > 0) {\n        currentPage.current++;\n        const data = await loadImage({\n        //   page: currentQuery.current,\n        //   page: currentPage.current\n        });\n        setImages([...images, ...data.results])\n      }\n    },[images, loadImage]);\n\n    useIntersectionObserver({\n        root: rootRef.current,\n        target: targetRef.current,\n        onIntersect: ([{isIntersecting}]) => {\n          if(\n            isIntersecting &&\n            !loading &&\n            currentPage.current < totalPage.current\n          ) {\n            loadMoreImage();\n          }\n        }\n      });\n    return (\n        <div ref={rootRef}>\n            <div ref={targetRef} />\n        </div>\n    //   <List ref={infiniteRef}>\n    //     {items.map((item) => (\n    //       <ListItem key={item.key}>{item.value}</ListItem>\n    //     ))}\n    //     {loading && <ListItem>Loading...</ListItem>}\n    //   </List>\n    );\n  }\n\n\n\n// const ListView= () => {\n\n//   const getData = (body) => {\n//     let key = '80CFeBE4MD6JmhEfClBx7zqo1eGvwTl5EZgKyMQc'\n//     axios.get(\"http://52.78.173.151/boards\", {\n//       \"x-api-key\": key,\n//       }, body)\n//       .then( res => {\n//         //  if(body.loadMore) setListInfo([...listInfo, ...res.data.listInfo]);\n//         //  else setListInfo(res.data.listInfo)\n//            })\n//       .catch(err => alert(\"글을 가져오는데 실패 했습니다.\"))\n//   }\n\n//   getData();\n//     return (\n//       <div>\n//         <h2>TITLE</h2>\n//         <Card></Card>\n//       </div>\n//     )\n// }\n\nexport default ListView;\n\n\n"]},"metadata":{},"sourceType":"module"}