{"ast":null,"code":"var _jsxFileName = \"/Users/juri/Documents/cp-dev/src/components/molecules/layout/ListView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport useInfiniteScroll from 'react-infinite-scroll-hook';\nimport axios from 'axios';\nimport Card from './Card'; // export default ({ root, target, onIntersect, threshold = 1.0, rootMargin = \"0px\" }) => {\n//     useEffect(\n//       () => {\n//         if (!root) {\n//           return;\n//         }\n//         const observer = new IntersectionObserver(onIntersect, {\n//           root,\n//           rootMargin,\n//           threshold,\n//         });\n//         if (!target) {\n//           return;\n//         }\n//         observer.observe(target);\n//         return () => {\n//           observer.unobserve(target);\n//         };\n//       }, [target, root, rootMargin, onIntersect, threshold]\n//     );\n//   };\n// import Infinite from './Infinite'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ListView({}) {\n  _s();\n\n  // instance variable\n  const currentPage = useRef(1);\n  const totalPage = useRef(0); // request state\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null); // contents list\n\n  const [images, setImages] = useState([]); // ref\n\n  const rootRef = useRef(null);\n  const targetRef = useRef(null);\n\n  const UnsplashAPI = body => {\n    let key = '80CFeBE4MD6JmhEfClBx7zqo1eGvwTl5EZgKyMQc';\n    axios.get(\"http://52.78.173.151/boards\", {\n      \"x-api-key\": key\n    }, body).then(res => {\n      console.log('res', res); //  if(body.loadMore) setListInfo([...listInfo, ...res.data.listInfo]);\n      //  else setListInfo(res.data.listInfo)\n    }).catch(err => alert(\"글을 가져오는데 실패 했습니다.\"));\n  };\n\n  const loadImage = useCallback(async ({\n    query,\n    page\n  }) => {\n    try {\n      setLoading(true);\n      const data = await UnsplashAPI.searchPhotos({\n        query,\n        page //   per_page: PER_PAGE\n\n      });\n      console.log('res', data);\n      totalPage.current = data.total_pages;\n      return data;\n    } catch (e) {\n      setError(e);\n    } finally {\n      setLoading(false);\n    }\n  }, []); // const searchImage = useCallback(async (query) => {\n  //   if(!query) {\n  //     await loadRandomImage();\n  //     return;\n  //   }\n  //   currentQuery.current = query;\n  //   currentPage.current = 1;\n  //   const data = await loadImage({ query, page: 1, per_page: PER_PAGE });\n  //   setImages(data.results);\n  // }, [loadImage, loadRandomImage]);\n\n  const loadMoreImage = useCallback(async () => {\n    if (images.length > 0) {\n      currentPage.current++;\n      const data = await loadImage({\n        query: currentQuery.current,\n        page: currentPage.current\n      });\n      setImages([...images, ...data.results]);\n    }\n  }, [images, loadImage]);\n  useIntersectionObserver({\n    root: rootRef.current,\n    target: targetRef.current,\n    onIntersect: ([{\n      isIntersecting\n    }]) => {\n      if (isIntersecting && !loading && currentPage.current < totalPage.current) {\n        loadMoreImage();\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: rootRef,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: targetRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 9\n  }, this) //   <List ref={infiniteRef}>\n  //     {items.map((item) => (\n  //       <ListItem key={item.key}>{item.value}</ListItem>\n  //     ))}\n  //     {loading && <ListItem>Loading...</ListItem>}\n  //   </List>\n  ;\n} // const ListView= () => {\n//   const getData = (body) => {\n//     let key = '80CFeBE4MD6JmhEfClBx7zqo1eGvwTl5EZgKyMQc'\n//     axios.get(\"http://52.78.173.151/boards\", {\n//       \"x-api-key\": key,\n//       }, body)\n//       .then( res => {\n//         //  if(body.loadMore) setListInfo([...listInfo, ...res.data.listInfo]);\n//         //  else setListInfo(res.data.listInfo)\n//            })\n//       .catch(err => alert(\"글을 가져오는데 실패 했습니다.\"))\n//   }\n//   getData();\n//     return (\n//       <div>\n//         <h2>TITLE</h2>\n//         <Card></Card>\n//       </div>\n//     )\n// }\n\n\n_s(ListView, \"hYWwvLuGAirZPJ7t+gST6LycyZA=\", true);\n\n_c = ListView;\nexport default ListView;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListView\");","map":{"version":3,"sources":["/Users/juri/Documents/cp-dev/src/components/molecules/layout/ListView.js"],"names":["React","useState","useEffect","useCallback","useRef","useInfiniteScroll","axios","Card","ListView","currentPage","totalPage","loading","setLoading","error","setError","images","setImages","rootRef","targetRef","UnsplashAPI","body","key","get","then","res","console","log","catch","err","alert","loadImage","query","page","data","searchPhotos","current","total_pages","e","loadMoreImage","length","currentQuery","results","useIntersectionObserver","root","target","onIntersect","isIntersecting"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useCallback, useRef} from 'react'\nimport useInfiniteScroll from 'react-infinite-scroll-hook';\nimport axios from 'axios'\nimport Card from './Card'\n\n\n// export default ({ root, target, onIntersect, threshold = 1.0, rootMargin = \"0px\" }) => {\n//     useEffect(\n//       () => {\n  \n//         if (!root) {\n//           return;\n//         }\n  \n//         const observer = new IntersectionObserver(onIntersect, {\n//           root,\n//           rootMargin,\n//           threshold,\n//         });\n  \n//         if (!target) {\n//           return;\n//         }\n  \n//         observer.observe(target);\n  \n//         return () => {\n//           observer.unobserve(target);\n//         };\n//       }, [target, root, rootMargin, onIntersect, threshold]\n//     );\n//   };\n\n\n\n// import Infinite from './Infinite'\n\nfunction ListView({}) {\n    // instance variable\n    const currentPage = useRef(1);\n    const totalPage = useRef(0);\n\n    // request state\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    // contents list\n    const [images, setImages] = useState([]);\n\n    // ref\n    const rootRef = useRef(null);\n    const targetRef = useRef(null);\n\n\n\n    const UnsplashAPI = (body) => {\n        let key = '80CFeBE4MD6JmhEfClBx7zqo1eGvwTl5EZgKyMQc'\n        axios.get(\"http://52.78.173.151/boards\", {\n          \"x-api-key\": key,\n          }, body)\n          .then( res => {\n              console.log('res',res)\n            //  if(body.loadMore) setListInfo([...listInfo, ...res.data.listInfo]);\n            //  else setListInfo(res.data.listInfo)\n               })\n          .catch(err => alert(\"글을 가져오는데 실패 했습니다.\"))\n    }\n\n    const loadImage = useCallback(async ({ query, page }) => {\n        try {\n          setLoading(true);\n          const data = await UnsplashAPI.searchPhotos({ \n              query, page, \n            //   per_page: PER_PAGE\n        });\n        console.log('res',data)\n          totalPage.current = data.total_pages;\n          return data;\n        } catch(e) {\n          setError(e);\n        } finally {\n          setLoading(false);\n        }\n    }, []);\n    \n    // const searchImage = useCallback(async (query) => {\n    //   if(!query) {\n    //     await loadRandomImage();\n    //     return;\n    //   }\n    //   currentQuery.current = query;\n    //   currentPage.current = 1;\n    //   const data = await loadImage({ query, page: 1, per_page: PER_PAGE });\n    //   setImages(data.results);\n    // }, [loadImage, loadRandomImage]);\n    \n    const loadMoreImage = useCallback(async () => {\n      if(images.length > 0) {\n        currentPage.current++;\n        const data = await loadImage({\n          query: currentQuery.current,\n          page: currentPage.current\n        });\n        setImages([...images, ...data.results])\n      }\n    },[images, loadImage]);\n\n    useIntersectionObserver({\n        root: rootRef.current,\n        target: targetRef.current,\n        onIntersect: ([{isIntersecting}]) => {\n          if(\n            isIntersecting &&\n            !loading &&\n            currentPage.current < totalPage.current\n          ) {\n            loadMoreImage();\n          }\n        }\n      });\n    return (\n        <div ref={rootRef}>\n            <div ref={targetRef} />\n        </div>\n    //   <List ref={infiniteRef}>\n    //     {items.map((item) => (\n    //       <ListItem key={item.key}>{item.value}</ListItem>\n    //     ))}\n    //     {loading && <ListItem>Loading...</ListItem>}\n    //   </List>\n    );\n  }\n\n\n\n// const ListView= () => {\n\n//   const getData = (body) => {\n//     let key = '80CFeBE4MD6JmhEfClBx7zqo1eGvwTl5EZgKyMQc'\n//     axios.get(\"http://52.78.173.151/boards\", {\n//       \"x-api-key\": key,\n//       }, body)\n//       .then( res => {\n//         //  if(body.loadMore) setListInfo([...listInfo, ...res.data.listInfo]);\n//         //  else setListInfo(res.data.listInfo)\n//            })\n//       .catch(err => alert(\"글을 가져오는데 실패 했습니다.\"))\n//   }\n\n//   getData();\n//     return (\n//       <div>\n//         <h2>TITLE</h2>\n//         <Card></Card>\n//       </div>\n//     )\n// }\n\nexport default ListView;\n\n\n"]},"metadata":{},"sourceType":"module"}