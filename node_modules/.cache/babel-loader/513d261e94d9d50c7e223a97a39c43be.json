{"ast":null,"code":"var _jsxFileName = \"/Users/we/dev/cp-dev/src/page/main/MainContainer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport axios from 'axios';\nimport PAGECONST from './utils/Constants';\nimport Card from '../../components/molecules/layout/card/Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MainContainer({}) {\n  _s();\n\n  const [paging, setPaging] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [list, setList] = useState([]);\n  const [payload, setPayload] = useState({\n    params: {\n      page: 1,\n      pageCount: PAGECONST.count,\n      totalCount: 0\n    }\n  });\n  /* 타겟 엘리먼트 */\n\n  const rootRef = useRef(null); // const targetRef = useRef(null);\n\n  const getData = () => {\n    let key = '80CFeBE4MD6JmhEfClBx7zqo1eGvwTl5EZgKyMQc';\n    axios.get(\"http://52.78.173.151/boards\", {\n      \"x-api-key\": key,\n      params: {\n        page: payload.params.page,\n        count: payload.params.pageCount\n      }\n    }).then(response => {\n      if (response) {\n        const {\n          result,\n          data\n        } = response.data;\n\n        if (result.code === 1) {\n          setIsLoading(true);\n          const paging = response.data.paging;\n          const newList = response.data.data;\n          const updateList = list.concat(newList);\n          setList(updateList);\n          setPaging(paging);\n          setIsLoading(false);\n        }\n      }\n    }).catch(err => alert(\"글을 가져오는데 실패 했습니다.\"));\n  };\n\n  const handlerNaxtBtn = () => {\n    console.log('TEST');\n    const {\n      page\n    } = payload.params;\n\n    if (Math.ceil(paging.totalCount / paging.count) > payload.params.page) {\n      setPayload({\n        params: { ...payload.params,\n          page: page + 1\n        }\n      });\n    }\n  };\n\n  window.addEventListener(\"scroll\", function () {\n    const SCROLLED_HEIGHT = window.scrollY;\n    const WINDOW_HEIGHT = window.innerHeight;\n    const DOC_TOTAL_HEIGHT = document.body.offsetHeight;\n    const IS_BOTTOM = WINDOW_HEIGHT + SCROLLED_HEIGHT === DOC_TOTAL_HEIGHT;\n\n    if (IS_BOTTOM) {\n      getData();\n    }\n  });\n  useEffect(() => {\n    getData();\n  }, [payload]);\n  useEffect(() => {// console.log('list # ',list)\n    // console.log('paging # ',paging)\n    // console.log('payload # ',payload)\n  }, [list, paging]); // const [target, setTarget] = useState(null);\n  // /* 인터섹션 callback */\n  // const onIntersect = async ([entry], observer) => {\n  //   if (entry.isIntersecting) {\n  //     observer.unobserve(entry.target);\n  //     await getData();\n  //     observer.observe(entry.target);\n  //   }\n  // };\n  // useEffect(() => {\n  //   let observer;\n  //   if (target) {\n  //     observer = new IntersectionObserver(onIntersect, { threshold: 0.5 });\n  //     observer.observe(target);\n  //   }\n  //   return () => observer && observer.disconnect();\n  // }, [target]);\n  //   let observer;\n  //   let options = {\n  //     root: null,\n  //     rootMargin: '10px',\n  //     threshold: 0.1\n  //   }\n  //   overserver = new IntersectionObserver(handleIntersect, options)\n  //   observer.observe(boxElement);\n  //   function handleIntersect(entries, observer) {\n  //     entries.forEach((entry) => {\n  //       //DOM = entry.target으로 지정하면 해당 요소 관찰\n  //       if (entry.intersectionRatio > prevRatio) {\n  //         entry.target.style.backgroundColor = increasingColor.replace(\"ratio\", entry.intersectionRatio);\n  //       } else {\n  //         entry.target.style.backgroundColor = decreasingColor.replace(\"ratio\", entry.intersectionRatio);\n  //       }\n  //       prevRatio = entry.intersectionRatio;\n  //     });\n  //   }\n  //   observerHandler = (entries, observer) => {\n  //     entries.forEach((entry) => {\n  //       console.log(this);\n  //       if (entry.isIntersecting) {\n  //         console.log(\"print\");\n  //         const image = entry.target;\n  //         const src = image.dataset.src; // img 태그의 data-lazy에 저장해둔 이미지 경로를 붙여준다.\n  //         image.setAttribute(\"src\", src);\n  //         image.removeAttribute(\"data-src\");\n  //         observer.unobserve(entry.target);\n  //       }\n  //     }, {\n  //       rootMargin: '1px 1px 1px 1px',\n  //       thresholds: [0.7],\n  //     });\n  //   }\n  // lazyLoadHandler= () => {\n  //     this.lazyImages = Array.prototype.slice.call(\n  //       // document.body.querySelectorAll(\".image\")\n  //     );\n  //     this.intersectionObserver = new IntersectionObserver(this.observerHandler.bind(this), this.options);\n  //     this.lazyImages.forEach((item) => this.intersectionObserver.observe(item));\n  //   }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: rootRef,\n    children: [list.map((el, i) => {\n      return (\n        /*#__PURE__*/\n        // <Card className=\"box\" key={i} ref={i == list.length - 1 && !payload.params.totalCount ? targetRef : null} ListData={list} item={el}/>\n        _jsxDEV(Card, {\n          className: \"box\",\n          ListData: list,\n          item: el\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this)\n      );\n    }), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: handlerNaxtBtn,\n      children: \"PUSH!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MainContainer, \"5VCo81bPuMtRaWlPOsW7pdpnyeM=\");\n\n_c = MainContainer;\nexport default MainContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainContainer\");","map":{"version":3,"sources":["/Users/we/dev/cp-dev/src/page/main/MainContainer.js"],"names":["React","useState","useEffect","useCallback","useRef","axios","PAGECONST","Card","MainContainer","paging","setPaging","isLoading","setIsLoading","list","setList","payload","setPayload","params","page","pageCount","count","totalCount","rootRef","getData","key","get","then","response","result","data","code","newList","updateList","concat","catch","err","alert","handlerNaxtBtn","console","log","Math","ceil","window","addEventListener","SCROLLED_HEIGHT","scrollY","WINDOW_HEIGHT","innerHeight","DOC_TOTAL_HEIGHT","document","body","offsetHeight","IS_BOTTOM","map","el","i"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useCallback, useRef} from 'react'\nimport axios from 'axios'\nimport PAGECONST from './utils/Constants';\nimport Card from '../../components/molecules/layout/card/Card'\n\nfunction MainContainer({}) { \n    const [paging, setPaging] = useState({})\n    const [isLoading, setIsLoading] = useState(false)\n    const [list, setList] = useState([])\n    const [payload, setPayload] = useState({\n        params: {\n            page: 1,\n            pageCount: PAGECONST.count,\n            totalCount: 0\n        }\n    })\n    /* 타겟 엘리먼트 */\n    const rootRef = useRef(null);\n    // const targetRef = useRef(null);\n\n    const getData = () => {\n      let key = '80CFeBE4MD6JmhEfClBx7zqo1eGvwTl5EZgKyMQc'\n      axios.get(\"http://52.78.173.151/boards\", {\n        \"x-api-key\": key,\n        params:{\n          page: payload.params.page,\n          count: payload.params.pageCount\n        }\n        })\n        .then( response => {\n         if(response){\n           const { result, data } = response.data\n           if(result.code === 1){\n              setIsLoading(true)\n              const paging = response.data.paging;\n              const newList = response.data.data;\n              const updateList = list.concat(newList);\n              setList(updateList);\n              setPaging(paging)\n              setIsLoading(false)\n           }\n         }\n        })\n        .catch(err => alert(\"글을 가져오는데 실패 했습니다.\"))\n    }\n    \n\n  const handlerNaxtBtn = () =>{\n    console.log('TEST')\n    const { page } = payload.params;\n    if(Math.ceil(paging.totalCount / paging.count) > payload.params.page){\n      setPayload({\n        params: {\n          ...payload.params,\n          page: page + 1,\n        }\n      })\n    }\n  }\n\n  window.addEventListener(\"scroll\", function () {\n   \n    const SCROLLED_HEIGHT = window.scrollY;\n    const WINDOW_HEIGHT = window.innerHeight;\n    const DOC_TOTAL_HEIGHT = document.body.offsetHeight;\n    const IS_BOTTOM = WINDOW_HEIGHT + SCROLLED_HEIGHT === DOC_TOTAL_HEIGHT;\n   \n    if (IS_BOTTOM) {\n      getData();\n    }\n  });\n\n  useEffect(() => {\n      getData();\n  },[payload])\n  useEffect(() =>{\n    // console.log('list # ',list)\n    // console.log('paging # ',paging)\n    // console.log('payload # ',payload)\n  },[list, paging])\n\n  // const [target, setTarget] = useState(null);\n  // /* 인터섹션 callback */\n  // const onIntersect = async ([entry], observer) => {\n  //   if (entry.isIntersecting) {\n  //     observer.unobserve(entry.target);\n  //     await getData();\n  //     observer.observe(entry.target);\n  //   }\n  // };\n  // useEffect(() => {\n  //   let observer;\n  //   if (target) {\n  //     observer = new IntersectionObserver(onIntersect, { threshold: 0.5 });\n  //     observer.observe(target);\n  //   }\n  //   return () => observer && observer.disconnect();\n  // }, [target]);\n\n  //   let observer;\n  //   let options = {\n  //     root: null,\n  //     rootMargin: '10px',\n  //     threshold: 0.1\n  //   }\n  //   overserver = new IntersectionObserver(handleIntersect, options)\n  //   observer.observe(boxElement);\n\n  //   function handleIntersect(entries, observer) {\n  //     entries.forEach((entry) => {\n  //       //DOM = entry.target으로 지정하면 해당 요소 관찰\n  //       if (entry.intersectionRatio > prevRatio) {\n  //         entry.target.style.backgroundColor = increasingColor.replace(\"ratio\", entry.intersectionRatio);\n  //       } else {\n  //         entry.target.style.backgroundColor = decreasingColor.replace(\"ratio\", entry.intersectionRatio);\n  //       }\n    \n  //       prevRatio = entry.intersectionRatio;\n  //     });\n  //   }\n\n  //   observerHandler = (entries, observer) => {\n  //     entries.forEach((entry) => {\n  //       console.log(this);\n\n  //       if (entry.isIntersecting) {\n  //         console.log(\"print\");\n  //         const image = entry.target;\n  //         const src = image.dataset.src; // img 태그의 data-lazy에 저장해둔 이미지 경로를 붙여준다.\n  //         image.setAttribute(\"src\", src);\n  //         image.removeAttribute(\"data-src\");\n  //         observer.unobserve(entry.target);\n  //       }\n  //     }, {\n  //       rootMargin: '1px 1px 1px 1px',\n  //       thresholds: [0.7],\n  //     });\n  //   }\n\n  // lazyLoadHandler= () => {\n  //     this.lazyImages = Array.prototype.slice.call(\n  //       // document.body.querySelectorAll(\".image\")\n  //     );\n\n  //     this.intersectionObserver = new IntersectionObserver(this.observerHandler.bind(this), this.options);\n\n  //     this.lazyImages.forEach((item) => this.intersectionObserver.observe(item));\n  //   }\n\n  return (\n    <div ref={rootRef}>\n      {list.map((el, i) => {\n          return (\n            // <Card className=\"box\" key={i} ref={i == list.length - 1 && !payload.params.totalCount ? targetRef : null} ListData={list} item={el}/>\n            <Card className=\"box\" key={i} ListData={list} item={el}/>\n          );\n        })\n      }\n      <button type=\"button\" onClick={handlerNaxtBtn}>PUSH!</button>\n      {isLoading && <p>Loading...</p>}\n    </div>\n  );\n}\n\nexport default MainContainer;\n\n\n"]},"metadata":{},"sourceType":"module"}